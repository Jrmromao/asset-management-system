generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  firstName     String
  lastName      String
  name          String
  title         String?
  employeeId    String?
  images        String?
  phoneNum      String?   @unique
  emailVerified DateTime?
  oauthId       String?
  roleId        String
  companyId     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role      Role       @relation(fields: [roleId], references: [id], onDelete: Restrict)
  assets    Asset[]    @relation("assignedToUser")
  auditLogs AuditLog[]
  // co2eRecords Co2eRecord[]
  accounts  Account[]
  userKits  UserKit[]

  @@unique([employeeId, companyId])
  // @@unique([phoneNum, companyId])
  @@index([companyId])
  @@index([roleId])
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)
  users   User[]

  @@index([companyId])
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users         User[]
  roles         Role[]
  assets        Asset[]
  accessories   Accessory[]
  categories    Category[]
  departments   Department[]
  locations     DepartmentLocation[]
  manufacturers Manufacturer[]
  models        Model[]
  inventories   Inventory[]
  statusLabels  StatusLabel[]
  auditLogs     AuditLog[]
  kits          Kit[]
  suppliers     Supplier[] // Add this relation
  License       License[]
}

model Manufacturer {
  id           String   @id @default(cuid())
  name         String   @unique
  url          String
  supportUrl   String   @unique
  supportPhone String? // Made optional
  supportEmail String? // Made optional
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  models  Model[]

  @@index([companyId])
}

model Model {
  id             String       @id @default(cuid())
  name           String
  modelNo        String
  categoryId     String
  manufacturerId String
  companyId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  notes          String?
  category       Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Restrict)
  company        Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets         Asset[]
  accessories    Accessory[]

  @@unique([modelNo, companyId])
  @@index([categoryId])
  @@index([manufacturerId])
  @@index([companyId])
}

model DepartmentLocation {
  id           String   @id @default(cuid())
  name         String // Changed from locName for consistency
  addressLine1 String
  addressLine2 String? // Made optional
  city         String
  state        String
  zip          String
  country      String
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset     Asset[]
  Accessory Accessory[]
  License   License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Inventory {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset     Asset[]
  Accessory Accessory[]
  License   License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Department {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset     Asset[]
  Accessory Accessory[]
  License   License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Supplier {
  id           String   @id @default(cuid())
  name         String
  contactName  String
  email        String   @unique
  phoneNum     String? // Made optional
  url          String? // Made optional
  addressLine1 String
  addressLine2 String? // Made optional
  city         String
  state        String
  zip          String
  country      String
  notes        String? // Made optional
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  assets      Asset[]
  accessories Accessory[]
  company     Company     @relation(fields: [companyId], references: [id])
  companyId   String
  License     License[]

  @@unique([email, companyId]) // Updated to make email unique per company
}

model Asset {
  id            String    @id @default(cuid())
  name          String
  serialNumber  String    @unique
  material      String
  weight        Decimal?
  endOfLife     DateTime
  datePurchased DateTime?
  assigneeId    String?
  statusLabelId String?
  locationId    String?
  inventoryId   String?
  companyId     String
  supplierId    String?
  departmentId  String?
  modelId       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  poNumber      String?   @unique
  price         Decimal?
  assignee      User?     @relation("assignedToUser", fields: [assigneeId], references: [id], onDelete: SetNull)
  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  model              Model?              @relation(fields: [modelId], references: [id], onDelete: SetNull)
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)

  // co2eRecords  Co2eRecord[]
  transactions Transaction[]
  License      License?      @relation(fields: [licenseId], references: [id])
  licenseId    String?

  @@index([assigneeId])
  @@index([companyId])
  @@index([licenseId])
  @@index([statusLabelId])
  @@index([supplierId])
  @@index([modelId])
}

model Accessory {
  id                 String   @id @default(cuid())
  name               String
  alertEmail         String
  reorderPoint       Int
  totalQuantityCount Int
  purchaseDate       DateTime
  notes              String?
  material           String
  weight             Decimal
  endOfLife          DateTime
  companyId          String
  modelId            String?
  statusLabelId      String?
  supplierId         String?
  departmentId       String?
  locationId         String?
  inventoryId        String?
  categoryId         String?
  poNumber           String?  @unique
  price              Decimal?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  // co2eRecords Co2eRecord[]
  model              Model?              @relation(fields: [modelId], references: [id], onDelete: SetNull)
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)

  @@index([companyId])
  @@index([categoryId])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  type      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  models  Model[]

  @@unique([name, companyId])
  @@index([companyId])
}

model License {
  id                 String   @id @default(cuid())
  name               String
  licensedEmail      String
  poNumber           String
  licenseKey         String   @unique(map: "Unique_License_LicenseKey")
  companyId          String
  statusLabelId      String?
  supplierId         String?
  departmentId       String?
  locationId         String?
  inventoryId        String?
  renewalDate        DateTime
  purchaseDate       DateTime
  purchaseNotes      String? // Optional
  licenseUrl         String? // Optional
  minCopiesAlert     Int
  alertRenewalDays   Int
  licenseCopiesCount Int
  purchasePrice      Decimal
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets             Asset[]
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)

  @@unique([licenseKey], map: "Unique_License_LicenseKey_Composite")
}

model StatusLabel {
  id          String   @id @default(cuid())
  name        String
  colorCode   String
  isArchived  Boolean  @default(false)
  allowLoan   Boolean  @default(false)
  description String
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets      Asset[]
  accessories Accessory[]
  License     License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Transaction {
  id        String   @id @default(cuid())
  type      String
  amount    Decimal
  assetId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String?
  details   String?
  userId    String
  companyId String
  createdAt DateTime @default(now())

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
}

// model Co2eRecord {
//   id               String   @id @default(cuid())
//   assetId          String?
//   accessoryId      String
//   userId           String?
//   co2e             Float
//   co2eType         String
//   sourceOrActivity String
//   createdAt        DateTime @default(now())
//   updatedAt        DateTime @updatedAt
//
//   accessory Accessory @relation(fields: [accessoryId], references: [id], onDelete: Cascade)
//   asset     Asset?    @relation(fields: [assetId], references: [id], onDelete: Cascade)
//   user      User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
//
//   @@index([assetId])
//   @@index([accessoryId])
//   @@index([userId])
// }

model Kit {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userKits UserKit[]

  @@unique([name, companyId])
  @@index([companyId])
}

model UserKit {
  userId    String
  kitId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  kit  Kit  @relation(fields: [kitId], references: [id], onDelete: Cascade)

  @@id([userId, kitId])
  @@index([userId])
  @@index([kitId])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
