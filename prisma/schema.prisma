generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  INVITED
  ACTIVE
  DISABLED
}

model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  firstName             String
  lastName              String
  name                  String
  title                 String?
  employeeId            String?
  images                String?
  phoneNum              String?       @unique
  emailVerified         DateTime?
  oauthId               String?
  roleId                String
  companyId             String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  active                Boolean       @default(true)
  accountType           String        @default("Internal User")
  departmentId          String?
  dataRetentionDate     DateTime?
  consentHistory        UserConsent[]
  dataProcessingConsent Boolean       @default(false)
  marketingConsent      Boolean       @default(false)
  lastConsentUpdate     DateTime?
  status                UserStatus    @default(INVITED)

  // Relations
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role        Role          @relation(fields: [roleId], references: [id], onDelete: Restrict)
  department  Department?   @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  assets      Asset[]       @relation("assignedToUser")
  auditLogs   AuditLog[]
  accounts    Account[]
  userKits    UserKit[]
  // licenses      UserLicense[]
  userItem    UserItem[]
  Co2eRecord  Co2eRecord[]
  Maintenance Maintenance[]

  @@unique([employeeId, companyId])
  @@index([companyId])
  @@index([roleId])
  @@index([email])
}

model License {
  id               String   @id @default(cuid())
  name             String
  licensedEmail    String
  poNumber         String
  companyId        String
  statusLabelId    String?
  supplierId       String?
  departmentId     String?
  locationId       String?
  inventoryId      String?
  renewalDate      DateTime
  purchaseDate     DateTime
  purchaseNotes    String?
  licenseUrl       String?
  minSeatsAlert    Int      @default(0)
  alertRenewalDays Int
  seats            Int      @default(0)
  purchasePrice    Decimal  @db.Decimal(10, 2)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  userItems          UserItem[]          @relation("LicenseToUserItem")
  LicenseSeat        LicenseSeat[]
  Asset              Asset[]
  PurchaseOrder      PurchaseOrder?      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId    String?
  Manufacturer       Manufacturer?       @relation(fields: [manufacturerId], references: [id])
  manufacturerId     String?
}

model PurchaseOrder {
  id             String        @id @default(cuid())
  poNumber       String        @unique
  companyId      String
  supplierId     String?
  purchaseDate   DateTime
  status         String        // e.g., "draft", "submitted", "approved", "received"
  notes          String?
  documentUrl    String?
  totalAmount    Decimal       @db.Decimal(10, 2)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  assets         Asset[]

  // Relations
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier       Supplier?       @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  licenses       License[]
  accessories    Accessory[]
  Manufacturer   Manufacturer?   @relation(fields: [manufacturerId], references: [id])
  manufacturerId String?

  @@index([companyId])
  @@index([supplierId])
}



model Accessory {
  id                 String              @id @default(cuid())
  name               String
  alertEmail         String
  serialNumber       String              @default("")
  reorderPoint       Int
  totalQuantityCount Int
  purchaseDate       DateTime?
  notes              String?
  material           String?
  endOfLife          DateTime?
  companyId          String
  modelNumber        String?
  statusLabelId      String?
  supplierId         String?
  departmentId       String?
  locationId         String?
  inventoryId        String?
  categoryId         String?
  poNumber           String?
  weight             Decimal?
  price              Decimal?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  
  // Relations
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  category           Category?           @relation(fields: [categoryId], references: [id])
  PurchaseOrder      PurchaseOrder?      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId    String?
  userItems          UserItem[]          @relation("AccessoryToUserItem")
  AccessoryStock     AccessoryStock[]
  Co2eRecord         Co2eRecord[]


  @@unique([poNumber, companyId])
  @@unique([serialNumber, companyId])
  @@index([companyId])
  @@index([categoryId])
}

model UserConsent {
  id        String   @id @default(cuid())
  userId    String
  type      String // 'data_processing', 'marketing', etc.
  granted   Boolean
  timestamp DateTime @default(now())
  ipAddress String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Form Template table to store the template structure
model FormTemplate {
  id        String              @id @default(cuid())
  name      String
  fields    Json
  companyId String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  company   Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets    Asset[]
  values    FormTemplateValue[]
  active    Boolean             @default(true)

  @@unique([name, companyId])
  @@index([companyId])
}

model FormTemplateValue {
  id           String       @id @default(cuid())
  values       Json
  assetId      String
  templateId   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  asset        Asset        @relation(fields: [assetId], references: [id], onDelete: Cascade)
  formTemplate FormTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([templateId])
}

// model UserLicense {
//   id            String    @id @default(cuid())
//   userId        String
//   licenseId     String
//   assignedAt    DateTime  @default(now())
//   expiresAt     DateTime?
//   seatsAssigned Int
//
//   // Relations
//   user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   license License @relation(fields: [licenseId], references: [id], onDelete: Cascade)
//
//   @@unique([userId, licenseId]) // Prevents duplicate assignments
//   @@index([userId])
//   @@index([licenseId])
// }

// model UserAccessory {
//   id          String    @id @default(cuid())
//   userId      String
//   accessoryId String
//   quantity    Int       @default(1)
//   assignedAt  DateTime  @default(now())
//   returnedAt  DateTime?
//   notes       String?
//   companyId   String
//
//   // Relations
//   user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   accessory Accessory @relation(fields: [accessoryId], references: [id], onDelete: Cascade)
//   company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
//
//   @@unique([userId, accessoryId]) // Prevent duplicate assignments
//   @@index([userId])
//   @@index([accessoryId])
//   @@index([companyId])
// }

model UserItem {
  id        String   @id @default(cuid())
  userId    String
  itemId    String
  itemType  ItemType
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  license   License?   @relation("LicenseToUserItem", fields: [itemId], references: [id], map: "license_to_user_item")
  accessory Accessory? @relation("AccessoryToUserItem", fields: [itemId], references: [id], map: "accessory_to_user_item")

  @@unique([userId, itemId, itemType])
  @@index([userId])
  @@index([companyId])
}

enum ItemType {
  LICENSE
  ACCESSORY
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Role {
  id          String   @id @default(cuid())
  name        String
  active      Boolean  @default(true)
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users       User[]
  isDefault   Boolean  @default(false)
  isAdmin     Boolean  @default(false)
  permissions Json?

  @@unique([name, companyId])
  @@index([companyId])
}

model Company {
  id                    String   @id @default(cuid())
  name                  String
  address               String?
  country               String?
  industry              String?
  subdomain             String?
  logoUrl               String?
  website               String?
  notes                 String?
  supportContact        String?
  gdprCompliant         Boolean  @default(false)
  dataRetentionPolicy   String?
  disasterRecoveryPlan  String?
  securityContact       String?
  primaryContactEmail   String   @unique
  primaryContactName    String?
  primaryContactPhone   String?
  billingContactEmail   String?
  billingContactName    String?
  billingContactPhone   String?
  technicalContactEmail String?
  technicalContactName  String?
  technicalContactPhone String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  status                String   @default("ACTIVE")
  active                Boolean  @default(true)

  // Relations
  users               User[]
  roles               Role[]
  departments         Department[]
  locations           DepartmentLocation[]
  inventories         Inventory[]
  statusLabels        StatusLabel[]
  suppliers           Supplier[]
  assets              Asset[]
  categories          Category[]
  manufacturers       Manufacturer[]
  models              Model[]
  formTemplates       FormTemplate[]
  auditLogs           AuditLog[]
  accessories         Accessory[]
  License             License[]
  AccessoryStock      AccessoryStock[]
  LicenseSeat         LicenseSeat[]
  AssetHistory        AssetHistory[]
  Kit                 Kit[]
  ReportConfiguration ReportConfiguration[]
  GeneratedReport     GeneratedReport[]
  Subscription        Subscription?
  flowRules           FlowRule[]
  userItems           UserItem[]
  purchaseOrders      PurchaseOrder[]

  @@unique([name])
}

model Manufacturer {
  id           String   @id @default(cuid())
  name         String   @unique
  url          String
  supportUrl   String   @unique
  supportPhone String?
  supportEmail String?
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  active       Boolean  @default(true)

  // Relations
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  models        Model[]
  License       License[]
  PurchaseOrder PurchaseOrder[]
  Maintenance   Maintenance[]

  @@index([companyId])
}

model Model {
  id             String       @id @default(cuid())
  name           String
  modelNo        String
  // categoryId     String
  manufacturerId String
  companyId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  notes          String?
  // category       Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Restrict)
  company        Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets         Asset[]
  active         Boolean      @default(true)

  @@unique([modelNo, companyId])
  // @@index([categoryId])
  @@index([manufacturerId])
  @@index([companyId])
}

model DepartmentLocation {
  id           String      @id @default(cuid())
  name         String // Changed from locName for consistency
  addressLine1 String
  addressLine2 String? // Made optional
  city         String
  state        String
  zip          String
  country      String
  companyId    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  active       Boolean     @default(true)
  company      Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset        Asset[]
  Accessory    Accessory[]
  License      License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Inventory {
  id        String      @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  active    Boolean     @default(true)
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset     Asset[]
  Accessory Accessory[]
  License   License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Department {
  id        String      @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  active    Boolean     @default(true)
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset     Asset[]
  Accessory Accessory[]
  License   License[]
  User      User[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Supplier {
  id            String          @id @default(cuid())
  name          String
  contactName   String
  email         String          @unique
  phoneNum      String? // Made optional
  url           String? // Made optional
  addressLine1  String
  addressLine2  String? // Made optional
  city          String
  state         String
  zip           String
  country       String
  notes         String? // Made optional
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  active        Boolean         @default(true)
  // Relations
  assets        Asset[]
  accessories   Accessory[]
  company       Company         @relation(fields: [companyId], references: [id])
  companyId     String
  License       License[]
  PurchaseOrder PurchaseOrder[]
  Maintenance   Maintenance[]

  @@unique([email, companyId]) // Updated to make email unique per company
}

model Asset {
  id                 String              @id @default(cuid())
  name               String
  serialNumber       String              @unique
  notes              String?
  reorderPoint       Int?
  purchaseDate       DateTime
  endOfLife          DateTime?
  companyId          String
  modelId            String
  statusLabelId      String?
  supplierId         String?
  departmentId       String?
  locationId         String?
  inventoryId        String?
  categoryId         String?
  formTemplateId     String?
  userId             String?
  assignedTo         String?
  warrantyEndDate    DateTime?
  depreciationRate   Decimal?
  purchasePrice      Decimal?
  currentValue       Decimal?
  lastMaintenance    DateTime?
  nextMaintenance    DateTime?
  metadata           Json?
  active             Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  model              Model               @relation(fields: [modelId], references: [id])
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  category           Category?           @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  formTemplate       FormTemplate?       @relation(fields: [formTemplateId], references: [id], onDelete: SetNull)
  user               User?               @relation("assignedToUser", fields: [userId], references: [id], onDelete: SetNull)
  co2eRecords        Co2eRecord[]
  values             FormTemplateValue[]
  transactions       Transaction[]
  assetHistory       AssetHistory[]
  Maintenance        Maintenance[]
  License            License?            @relation(fields: [licenseId], references: [id])
  licenseId          String?
  flowExecutions     FlowExecution[]
  purchaseOrder      PurchaseOrder?      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId    String?

  @@unique([name, companyId])
  @@index([companyId])
  @@index([modelId])
  @@index([userId])
}

model Category {
  id          String      @id @default(cuid())
  name        String
  description String?
  companyId   String
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  accessories Accessory[]
  assets      Asset[]

  @@unique([name, companyId])
  @@index([companyId])
}

model StatusLabel {
  id          String        @id @default(cuid())
  name        String
  colorCode   String
  isArchived  Boolean       @default(false)
  allowLoan   Boolean       @default(false)
  description String
  companyId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  active      Boolean       @default(true)
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets      Asset[]
  accessories Accessory[]
  License     License[]
  Maintenance Maintenance[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Transaction {
  id        String   @id @default(cuid())
  type      String
  amount    Decimal  @db.Decimal(10, 2)
  assetId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
}

model AuditLog {
  id           String   @id @default(cuid())
  action       String
  entity       String
  entityId     String?
  details      String?
  userId       String
  companyId    String
  createdAt    DateTime @default(now())
  ipAddress    String? // Track IP for data access
  dataAccessed Json? // Track what data was accessed

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
}

model Co2eRecord {
  id               String   @id @default(cuid())
  assetId          String
  itemType         String // Should be either "Asset" or "Accessory"
  userId           String?
  co2e             Decimal  @db.Decimal(15, 2)
  co2eType         String
  units            String   @default("kg")
  sourceOrActivity String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Only one of these will be used based on itemType
  asset         Asset        @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user          User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  Accessory     Accessory?   @relation(fields: [accessoryId], references: [id])
  accessoryId   String?
  Maintenance   Maintenance? @relation(fields: [maintenanceId], references: [id])
  maintenanceId String?
}

// Track accessory stock movements
model AccessoryStock {
  id          String   @id @default(cuid())
  accessoryId String
  quantity    Int
  type        String // purchase, assignment, return, disposal
  date        DateTime @default(now())
  notes       String?
  companyId   String

  accessory Accessory @relation(fields: [accessoryId], references: [id], onDelete: Cascade)
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([accessoryId])
  @@index([companyId])
}

// Track license seat allocations
model LicenseSeat {
  id        String   @id @default(cuid())
  licenseId String
  quantity  Int // Number of seats in this allocation
  type      String // purchase, allocation, release
  date      DateTime @default(now())
  notes     String?
  companyId String

  license License @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([companyId])
}

// Track asset movements/status changes
model AssetHistory {
  id        String   @id @default(cuid())
  assetId   String
  type      String // purchase, assignment, return, disposal, status_change
  date      DateTime @default(now())
  notes     String?
  companyId String

  asset   Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([companyId])
}

model Kit {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userKits UserKit[]

  @@unique([name, companyId])
  @@index([companyId])
}

model UserKit {
  userId    String
  kitId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  kit  Kit  @relation(fields: [kitId], references: [id], onDelete: Cascade)

  @@id([userId, kitId])
  @@index([userId])
  @@index([kitId])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Report configuration/template model
model ReportConfiguration {
  id                String   @id @default(cuid())
  name              String
  format            String // PDF, XLSX, etc.
  timePeriod        String // last30days, etc.
  isScheduled       Boolean  @default(false)
  scheduleFrequency String?
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  metrics          ReportMetric[]
  generatedReports GeneratedReport[]

  @@unique([name, companyId])
  @@index([companyId])
}

// Selected metrics for each report configuration
model ReportMetric {
  id                    String  @id @default(cuid())
  reportConfigurationId String
  category              String // Environmental, Operations, Financial, etc.
  metricName            String // Energy Consumption, Carbon Emissions, etc.
  enabled               Boolean @default(true)

  // Relations
  reportConfiguration ReportConfiguration @relation(fields: [reportConfigurationId], references: [id], onDelete: Cascade)

  @@unique([reportConfigurationId, metricName])
  @@index([reportConfigurationId])
}

// Generated reports
model GeneratedReport {
  id              String   @id @default(cuid())
  configurationId String
  title           String
  format          String // PDF, XLSX, etc.
  filePath        String
  fileSize        Float // in MB
  status          String   @default("completed") // completed, processing, failed
  generatedAt     DateTime @default(now())
  companyId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  configuration ReportConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  company       Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([configurationId])
  @@index([companyId])
}

// Add these models to your schema
model Subscription {
  id                   String    @id @default(cuid())
  companyId            String    @unique // One subscription per company
  stripeCustomerId     String    @unique
  stripePriceId        String
  stripeSubscriptionId String    @unique
  status               String // active, past_due, canceled, etc.
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  plan                 PlanType  @default(FREE)
  pricePerAsset        Decimal   @db.Decimal(10, 2)
  billingCycleAnchor   DateTime
  trialEndsAt          DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  usageRecords    UsageRecord[]
  invoices        Invoice[]
  billingSettings BillingSettings?

  @@index([companyId])
}

model BillingSettings {
  id                  String  @id @default(cuid())
  subscriptionId      String  @unique
  paymentMethodId     String?
  billingEmail        String
  taxId               String?
  billingAddressLine1 String?
  billingAddressLine2 String?
  billingCity         String?
  billingState        String?
  billingZip          String?
  billingCountry      String?

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model UsageRecord {
  id                  String   @id @default(cuid())
  subscriptionId      String
  purchasedAssetQuota Int // Number of assets customer paid to track
  actualAssetCount    Int // Current number of assets being tracked
  timestamp           DateTime @default(now())
  billingPeriodStart  DateTime
  billingPeriodEnd    DateTime
  stripeUsageRecordId String?
  pricePerAsset       Decimal  @db.Decimal(10, 2)
  totalAmount         Decimal  @db.Decimal(10, 2)

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([timestamp])
}

model Invoice {
  id              String    @id @default(cuid())
  subscriptionId  String
  stripeInvoiceId String    @unique
  amount          Decimal   @db.Decimal(10, 2)
  status          String // paid, open, void
  invoiceDate     DateTime
  dueDate         DateTime
  paidAt          DateTime?
  billingPeriod   Json // Store start and end dates
  items           Json // Store line items
  subtotal        Decimal   @db.Decimal(10, 2)
  tax             Decimal   @db.Decimal(10, 2)
  total           Decimal   @db.Decimal(10, 2)

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([invoiceDate])
}

// thus is the membership plan
enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

// Company status
enum CompanyStatus {
  ACTIVE
  INACTIVE
}

model Maintenance {
  id             String    @id @default(cuid())
  assetId        String
  statusLabelId  String
  technicianId   String?
  supplierId     String?
  title          String
  notes          String?
  startDate      DateTime
  completionDate DateTime?
  cost           Decimal?  @db.Decimal(10, 2)
  totalCost      Decimal?  @db.Decimal(10, 2)
  isWarranty     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  asset          Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  statusLabel    StatusLabel     @relation(fields: [statusLabelId], references: [id])
  technician     User?           @relation(fields: [technicianId], references: [id])
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  co2eRecords    Co2eRecord[] // Relation to CO2e records
  flowExecutions FlowExecution[]
  Manufacturer   Manufacturer?   @relation(fields: [manufacturerId], references: [id])
  manufacturerId String?

  @@index([assetId])
  @@index([statusLabelId])
  @@index([technicianId])
}

// Flow Rules System
model FlowRule {
  id          String   @id @default(cuid())
  name        String
  description String
  trigger     String // 'status_change', 'creation', 'completion', 'approval'
  priority    Int      @default(100)
  isActive    Boolean  @default(true)
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company    Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conditions FlowCondition[]
  actions    FlowAction[]
  executions FlowExecution[]

  @@unique([name, companyId])
  @@index([companyId])
  @@index([trigger])
  @@index([isActive])
}

model FlowCondition {
  id              String  @id @default(cuid())
  flowRuleId      String
  field           String // e.g., 'maintenance.priority', 'asset.category.name'
  operator        String // 'equals', 'not_equals', 'contains', 'greater_than', 'less_than', 'in', 'not_in'
  value           String // JSON string for complex values
  logicalOperator String? @default("AND") // 'AND', 'OR' - for chaining conditions
  order           Int     @default(0) // Order of conditions within the rule

  // Relations
  flowRule FlowRule @relation(fields: [flowRuleId], references: [id], onDelete: Cascade)

  @@index([flowRuleId])
  @@index([order])
}

model FlowAction {
  id         String @id @default(cuid())
  flowRuleId String
  type       String // 'update_status', 'send_notification', 'update_asset', 'create_record', 'send_email', 'calculate_cost'
  parameters Json // Action-specific parameters
  order      Int    @default(0) // Order of actions within the rule

  // Relations
  flowRule FlowRule @relation(fields: [flowRuleId], references: [id], onDelete: Cascade)

  @@index([flowRuleId])
  @@index([order])
}

model FlowExecution {
  id            String   @id @default(cuid())
  flowRuleId    String
  maintenanceId String?
  assetId       String?
  trigger       String
  context       Json // Snapshot of context when rule was executed
  results       Json // Results of action executions
  executedAt    DateTime @default(now())
  success       Boolean  @default(true)
  errorMessage  String?

  // Relations
  flowRule    FlowRule     @relation(fields: [flowRuleId], references: [id], onDelete: Cascade)
  maintenance Maintenance? @relation(fields: [maintenanceId], references: [id], onDelete: SetNull)
  asset       Asset?       @relation(fields: [assetId], references: [id], onDelete: SetNull)

  @@index([flowRuleId])
  @@index([maintenanceId])
  @@index([assetId])
  @@index([executedAt])
  @@index([success])
}
