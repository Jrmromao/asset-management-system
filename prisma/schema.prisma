generator client {
  provider = "prisma-client-js"
}

// npx prisma migrate dev --create-only --name <NAME>
// npx prisma migrate dev
// npx prisma generate
// npx prisma db pull
// npx prisma db push -

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  oauthId       String?
  roleId        String
  companyId     String
  firstName     String
  lastName      String
  name          String
  Images        String?
  emailVerified DateTime?
  title         String?
  auditLogs     AuditLog[]
  company       Company      @relation(fields: [companyId], references: [id])
  role          Role         @relation(fields: [roleId], references: [id])
  co2eRecords   Co2eRecord[]
  employeeId    String?
  accounts      Account[]
  Asset         Asset[]      @relation(name: "assignedToUser")
  // UserKit       UserKit[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Co2eRecord {
  id               String    @id @default(cuid())
  asset            Asset     @relation(fields: [assetId], references: [id])
  assetId          String
  accessoryId      String
  assessory        Accessory @relation(fields: [accessoryId], references: [id])
  co2e             Float // CO2e in kg
  co2eType         String // Type of CO2e (e.g., Scope 1, Scope 2, Scope 3)
  sourceOrActivity String // Description of the source or activity
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  User             User?     @relation(fields: [userId], references: [id])
  userId           String?
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
}

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  auditLogs    AuditLog[]
  users        User[]
  assets       Asset[]
  accessories  Accessory[]
  categories   Category[]
  roles        Role[]
  statusLabels StatusLable[]
  // kits         Kit[]
  locations    Location[] // Company has many locations
  departments  Department[] // Company has many departments
  inventories  Inventory[] // Company has many inventories
}

model Manufacturer {
  id           String   @id @default(cuid())
  name         String   @unique
  url          String
  supportUrl   String   @unique
  supportPhone String   @unique
  supportEmail String   @unique
  models       Model[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Model {
  id             String       @id @default(cuid())
  name           String
  modelNo        String
  categoryId     String
  category       Category     @relation(fields: [categoryId], references: [id])
  manufacturerId String
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
  assets         Asset[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Location {
  id           String   @id @default(cuid())
  locName      String   @unique
  addressLine1 String
  addressLine2 String
  city         String
  state        String
  zip          String
  country      String
  companyId    String
  company      Company  @relation(fields: [companyId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Inventory {
  id        String   @id @default(cuid())
  name      String
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id        String   @id @default(cuid())
  name      String
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id           String   @id @default(cuid())
  name         String
  addressLine1 String
  addressLine2 String
  city         String
  state        String
  zip          String
  country      String
  phone        String
  contactName  String
  email        String
  phoneNum     String
  url          String
  notes        String
  Asset        Asset[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Asset {
  id            String       @id @default(cuid())
  name          String
  assigneeId    String?
  assignee      User?        @relation(fields: [assigneeId], references: [id], onDelete: Cascade, name: "assignedToUser") // Added a name to this relation
  serialNumber  String       @unique
  licenseId     String?
  license       License?     @relation(fields: [licenseId], references: [id])
  statusLabelId String?
  statusLabel   StatusLable? @relation(fields: [statusLabelId], references: [id])
  Co2eRecord    Co2eRecord[]
  companyId     String
  company       Company      @relation(fields: [companyId], references: [id])
  // kits          KitAsset[]
  supplierId    String? // An asset can have one supplier
  supplier      Supplier?    @relation(fields: [supplierId], references: [id])
  // KitAsset      KitItem[]
  Model         Model?       @relation(fields: [modelId], references: [id])
  modelId       String?
  endOfLife     DateTime
  material      String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Accessory {
  id                 String       @id @default(cuid())
  title              String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  alertEmail         String
  minQuantityAlert   Int
  totalQuantityCount Int
  vendor             String
  purchaseDate       DateTime
  description        String?
  companyId          String?
  company            Company?     @relation(fields: [companyId], references: [id])
  categoryId         String?
  endOfLife          DateTime
  material           String
  // KitAsset           KitItem[]
  Co2eRecord         Co2eRecord[]
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  model     Model[]
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
}

model License {
  id                 String   @id @default(cuid())
  name               String   @unique
  licensedEmail      String
  licenseKey         String
  renewalDate        DateTime
  purchaseDate       DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  vendor             String?
  purchaseNotes      String?
  licenseUrl         String?
  minCopiesAlert     Int
  alertRenewalDays   Int
  licenseCopiesCount Int
  purchasePrice      Decimal
  assets             Asset[]
  // KitAsset           KitItem[]
}

// model Kit {
//   id          String   @id @default(cuid())
//   name        String
//   description String?
//   // assets      KitItem[] @relation(name: "KitAssets")
//   // accessories KitItem[] @relation(name: "KitAccessories")
//   // licenses    KitItem[] @relation(name: "KitLicenses")
//   licenseIds  String[] // Optional: For direct access to license IDs associated with the kit
//   // users       UserKit[]
//   companyId   String
//   // company     Company   @relation(fields: [companyId], references: [id])
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
// }

model StatusLable {
  id          String   @id @default(cuid())
  name        String   @unique
  colorCode   String
  isArchived  Boolean
  allowLoan   Boolean
  description String
  Asset       Asset[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?
}

//
// model KitItem {
//   id          String   @id @default(cuid())
//   kitId       String
//   itemId      String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @default(now())
//   // kitAsset     Kit      @relation(name: "KitAssets", fields: [kitId], references: [id], map: "KitItem_kitAsset_fkey")
//   // kitAccessory Kit      @relation(name: "KitAccessories", fields: [kitId], references: [id], map: "KitItem_kitAccessory_fkey")
//   // kitLicense   Kit      @relation(name: "KitLicenses", fields: [kitId], references: [id], map: "KitItem_kitLicense_fkey")
//   // accessory    Accessory? @relation(fields: [accessoryId], references: [id])
//   accessoryId String?
//   // asset        Asset?     @relation(fields: [assetId], references: [id])
//   assetId     String?
//   // license      License?   @relation(fields: [licenseId], references: [id])
//   licenseId   String?
//
//   @@unique([kitId, itemId])
// }

model Transaction {
  id        String   @id @default(cuid())
  type      String
  amount    Float
  assetId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String?
  userId    String
  details   String?
  createdAt DateTime @default(now())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserKit {
  userId    String
  kitId     String
  // user      User     @relation(fields: [userId], references: [id])
  // kit       Kit      @relation(fields: [kitId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, kitId])
}
