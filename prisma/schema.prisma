generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  INVITED
  ACTIVE
  DISABLED
}

model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  firstName             String
  lastName              String
  name                  String
  title                 String?
  employeeId            String?
  images                String?
  phoneNum              String?       @unique
  emailVerified         DateTime?
  oauthId               String?       @unique
  username              String?       @unique
  roleId                String
  companyId             String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  active                Boolean       @default(true)
  accountType           String        @default("Internal User")
  departmentId          String?
  dataRetentionDate     DateTime?
  consentHistory        UserConsent[]
  dataProcessingConsent Boolean       @default(false)
  marketingConsent      Boolean       @default(false)
  lastConsentUpdate     DateTime?
  status                UserStatus    @default(INVITED)

  // Soft delete fields
  isDeleted             Boolean       @default(false)
  deletedAt             DateTime?

  // Relations
  company           Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role              Role          @relation(fields: [roleId], references: [id], onDelete: Restrict)
  department        Department?   @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  assets            Asset[]       @relation("assignedToUser")
  auditLogs         AuditLog[]
  accounts          Account[]
  userKits          UserKit[]
  userItem          UserItem[]
  Co2eRecord        Co2eRecord[]
  sentInvitations   Invitation[]  @relation("UserInvitations")

  @@unique([employeeId, companyId])
  @@index([companyId])
  @@index([roleId])
  @@index([email])
}

model Invitation {
  id                String   @id @default(cuid())
  email             String
  roleId            String
  companyId         String
  invitedBy         String
  token             String   @unique
  clerkInvitationId String?  @unique
  status            String   @default("PENDING")
  expiresAt         DateTime?
  acceptedAt        DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Restrict)
  inviter   User    @relation("UserInvitations", fields: [invitedBy], references: [id], onDelete: Restrict)

  @@unique([email, companyId])
  @@index([companyId])
  @@index([status])
  @@index([email])
  @@index([token])
}

model License {
  id               String   @id @default(cuid())
  name             String
  licensedEmail    String
  poNumber         String
  companyId        String
  statusLabelId    String?
  supplierId       String?
  departmentId     String?
  locationId       String?
  inventoryId      String?
  renewalDate      DateTime
  purchaseDate     DateTime
  purchaseNotes    String?
  licenseUrl       String?
  
  minSeatsAlert    Int      @default(0)
  alertRenewalDays Int
  seats            Int      @default(0)
  purchasePrice    Decimal  @db.Decimal(10, 2)
  
  // Enhanced pricing fields for cost optimization
  renewalPrice     Decimal? @db.Decimal(10, 2)  // Price for renewal (may differ from purchase)
  monthlyPrice     Decimal? @db.Decimal(10, 2)  // Monthly subscription price
  annualPrice      Decimal? @db.Decimal(10, 2)  // Annual subscription price
  pricePerSeat     Decimal? @db.Decimal(10, 4)  // Price per seat/user
  billingCycle     String?  @default("annual")   // "monthly", "annual", "one-time"
  currency         String   @default("USD")      // Currency code
  discountPercent  Decimal? @db.Decimal(5, 2)   // Discount percentage applied
  taxRate Decimal? @db.Decimal(6, 2)   // Allows up to 9999.99
utilizationRate Decimal? @db.Decimal(6, 2) // Allows up to 9999.99
  // Usage and optimization fields
  lastUsageAudit   DateTime?                     // Last time usage was audited
  costCenter       String?                       // Cost center for accounting
  budgetCode       String?                        // Budget allocation code
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  licenseFiles     LicenseFile[]

  // Relations
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  LicenseSeat        LicenseSeat[]
  Asset              Asset[]
  PurchaseOrder      PurchaseOrder?      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId    String?
  Manufacturer       Manufacturer?       @relation(fields: [manufacturerId], references: [id])
  manufacturerId     String?
  userItems          UserItem[]
}

model LicenseFile {
  id         String   @id @default(cuid())
  licenseId  String
  fileUrl    String   // S3 key or URL
  fileName   String
  uploadedAt DateTime @default(now())
  uploadedBy String?  // User ID or name (optional)
  license    License  @relation(fields: [licenseId], references: [id], onDelete: Cascade)

  @@index([licenseId])
}

model PurchaseOrder {
  id             String        @id @default(cuid())
  poNumber       String        @unique
  companyId      String
  supplierId     String?
  purchaseDate   DateTime
  status         String        // e.g., "draft", "submitted", "approved", "received"
  notes          String?
  documentUrl    String?
  totalAmount    Decimal       @db.Decimal(10, 2)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  assets         Asset[]

  // Relations
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  supplier       Supplier?       @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  licenses       License[]
  accessories    Accessory[]
  Manufacturer   Manufacturer?   @relation(fields: [manufacturerId], references: [id])
  manufacturerId String?

  @@index([companyId])
  @@index([supplierId])
}

model Accessory {
  id                 String              @id @default(cuid())
  name               String
  alertEmail         String
  serialNumber       String              @default("")
  reorderPoint       Int
  energyConsumption  Decimal?
  totalQuantityCount Int
  purchaseDate       DateTime?
  notes              String?
  material           String?
  endOfLife          DateTime?
  companyId          String
  modelNumber        String?
  statusLabelId      String?
  supplierId         String?
  departmentId       String?
  locationId         String?
  inventoryId        String?
  categoryId         String?
  poNumber           String?
  weight             Decimal?
  price              Decimal?  @db.Decimal(10, 2)
  
  // Enhanced pricing fields for cost optimization
  unitCost           Decimal?  @db.Decimal(10, 2)  // Cost per unit
  totalValue         Decimal?  @db.Decimal(10, 2)  // Total inventory value
  currency           String    @default("USD")      // Currency code
  depreciationRate   Decimal?  @db.Decimal(5, 4)   // Annual depreciation rate
  currentValue       Decimal?  @db.Decimal(10, 2)  // Current depreciated value
  replacementCost    Decimal?  @db.Decimal(10, 2)  // Cost to replace
  
  // Inventory optimization fields
  averageCostPerUnit Decimal?  @db.Decimal(10, 4)  // Weighted average cost
  lastPurchasePrice  Decimal?  @db.Decimal(10, 2)  // Most recent purchase price
  costCenter         String?                        // Cost center for accounting
  budgetCode         String?                        // Budget allocation code
  
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  
  // Relations
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  category           Category?           @relation(fields: [categoryId], references: [id])
  PurchaseOrder      PurchaseOrder?      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId    String?
  AccessoryStock     AccessoryStock[]
  Co2eRecord         Co2eRecord[]
  userItems          UserItem[]

  @@unique([poNumber, companyId])
  @@unique([serialNumber, companyId])
  @@index([companyId])
  @@index([categoryId])
}

model UserConsent {
  id        String   @id @default(cuid())
  userId    String
  type      String // 'data_processing', 'marketing', etc.
  granted   Boolean
  timestamp DateTime @default(now())
  ipAddress String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Form Template table to store the template structure
model FormTemplate {
  id          String              @id @default(cuid())
  name        String
  fields      Json                // Array of field definitions
  companyId   String
  categoryId  String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  active      Boolean             @default(true)

  // Relations
  company     Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  values      FormTemplateValue[]
  categories  Category[]

  @@unique([name, companyId])
  @@index([companyId])
  @@index([categoryId])
}

model FormTemplateValue {
  id           String       @id @default(cuid())
  values       Json        // Actual field values
  assetId      String
  templateId   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  asset        Asset        @relation(fields: [assetId], references: [id], onDelete: Cascade)
  formTemplate FormTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([templateId])
}

// model UserLicense {
//   id            String    @id @default(cuid())
//   userId        String
//   licenseId     String
//   assignedAt    DateTime  @default(now())
//   expiresAt     DateTime?
//   seatsAssigned Int
//
//   // Relations
//   user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   license License @relation(fields: [licenseId], references: [id], onDelete: Cascade)
//
//   @@unique([userId, licenseId]) // Prevents duplicate assignments
//   @@index([userId])
//   @@index([licenseId])
// }

// model UserAccessory {
//   id          String    @id @default(cuid())
//   userId      String
//   accessoryId String
//   quantity    Int       @default(1)
//   assignedAt  DateTime  @default(now())
//   returnedAt  DateTime?
//   notes       String?
//   companyId   String
//
//   // Relations
//   user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   accessory Accessory @relation(fields: [accessoryId], references: [id], onDelete: Cascade)
//   company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
//
//   @@unique([userId, accessoryId]) // Prevent duplicate assignments
//   @@index([userId])
//   @@index([accessoryId])
//   @@index([companyId])
// }

model UserItem {
  id        String   @id @default(cuid())
  userId    String
  licenseId String? // For LICENSE assignments
  accessoryId String? // For ACCESSORY assignments
  assetId   String? // For ASSET assignments (future use)
  itemType  ItemType
  quantity  Int      @default(1) // For LICENSE (seats) and ACCESSORY (units)
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  license   License?   @relation(fields: [licenseId], references: [id])
  accessory Accessory? @relation(fields: [accessoryId], references: [id])
  asset     Asset?     @relation(fields: [assetId], references: [id])

  @@unique([userId, licenseId, accessoryId, assetId, itemType])
  @@index([userId])
  @@index([companyId])
  @@index([licenseId, itemType])
  @@index([accessoryId, itemType])
  @@index([assetId, itemType])
}

enum ItemType {
  LICENSE
  ACCESSORY
  ASSET
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Role {
  id          String   @id @default(cuid())
  name        String
  active      Boolean  @default(true)
  companyId   String?  // Made optional for global roles
  isGlobal    Boolean  @default(false) // Flag for global roles
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users       User[]
  invitations Invitation[]
  isDefault   Boolean  @default(false)
  isAdmin     Boolean  @default(false)
  permissions Json?

  @@unique([name, companyId])
  @@index([companyId])
  @@index([isGlobal])
}

model Company {
  id                    String   @id @default(cuid())
  name                  String
  clerkOrgId            String?  @unique
  address               String?
  country               String?
  industry              String?
  subdomain             String?
  logoUrl               String?
  website               String?
  notes                 String?
  supportContact        String?
  gdprCompliant         Boolean  @default(false)
  dataRetentionPolicy   String?
  disasterRecoveryPlan  String?
  securityContact       String?
  primaryContactEmail   String?
  primaryContactName    String?
  primaryContactPhone   String?
  billingContactEmail   String?
  billingContactName    String?
  billingContactPhone   String?
  technicalContactEmail String?
  technicalContactName  String?
  technicalContactPhone String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  status                String   @default("ACTIVE")
  active                Boolean  @default(true)
  targetEnergy          Decimal? @db.Decimal(12, 2) // Company-defined energy efficiency target (kWh)
  targetCarbonReduction Decimal? @db.Decimal(12, 2) // Company-defined carbon reduction target (tons)

  // Relations
  users                        User[]
  roles                        Role[]
  invitations                  Invitation[]
  departments                  Department[]
  locations                    DepartmentLocation[]
  inventories                  Inventory[]
  statusLabels                 StatusLabel[]
  suppliers                    Supplier[]
  assets                       Asset[]
  categories                   Category[]
  manufacturers                Manufacturer[]
  models                       Model[]
  formTemplates                FormTemplate[]
  auditLogs                    AuditLog[]
  accessories                  Accessory[]
  License                      License[]
  AccessoryStock               AccessoryStock[]
  LicenseSeat                  LicenseSeat[]
  AssetHistory                 AssetHistory[]
  Kit                          Kit[]
  ReportConfiguration          ReportConfiguration[]
  GeneratedReport              GeneratedReport[]
  Subscription                 Subscription?
  flowRules                    FlowRule[]
  userItems                    UserItem[]
  purchaseOrders               PurchaseOrder[]
  costOptimizationAnalyses     CostOptimizationAnalysis[]
  costBudgets                  CostBudget[]
  maintenanceCategories        MaintenanceCategory[]
  maintenanceTypes             MaintenanceType[]
  reportDownloads              ReportDownload[]
  reportCleanupLogs            ReportCleanupLog[]
  fileProtectionRules          FileProtectionRule[]
  cleanupPolicies              CleanupPolicy[]
  storageAnalytics             StorageAnalytics[]
  settings                     CompanySettings?

  @@unique([name])
}

model Manufacturer {
  id           String   @id @default(cuid())
  name         String   @unique
  url          String
  supportUrl   String   @unique
  supportPhone String?
  supportEmail String?
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  active       Boolean  @default(true)

  // Relations
  company       Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  models        Model[]
  License       License[]
  PurchaseOrder PurchaseOrder[]
  Maintenance   Maintenance[]

  @@index([companyId])
}

model Model {
  id             String       @id @default(cuid())
  name           String
  modelNo        String
  manufacturerId String
  companyId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  notes          String?
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Restrict)
  company        Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets         Asset[]
  active         Boolean      @default(true)

  @@unique([modelNo, companyId])
  @@index([manufacturerId])
  @@index([companyId])
}

model DepartmentLocation {
  id           String      @id @default(cuid())
  name         String // Changed from locName for consistency
  addressLine1 String
  addressLine2 String? // Made optional
  city         String
  state        String
  zip          String
  country      String
  companyId    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  active       Boolean     @default(true)
  company      Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset        Asset[]
  Accessory    Accessory[]
  License      License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Inventory {
  id        String      @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  active    Boolean     @default(true)
  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset     Asset[]
  Accessory Accessory[]
  License   License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Department {
  id          String       @id @default(cuid())
  name        String
  companyId   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  active      Boolean      @default(true)
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset       Asset[]
  Accessory   Accessory[]
  License     License[]
  User        User[]
  costBudgets CostBudget[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Supplier {
  id            String          @id @default(cuid())
  name          String
  contactName   String
  email         String          @unique
  phoneNum      String? // Made optional
  url           String? // Made optional
  addressLine1  String
  addressLine2  String? // Made optional
  city          String
  state         String
  zip           String
  country       String
  notes         String? // Made optional
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  active        Boolean         @default(true)
  // Relations
  assets        Asset[]
  accessories   Accessory[]
  company       Company         @relation(fields: [companyId], references: [id])
  companyId     String
  License       License[]
  PurchaseOrder PurchaseOrder[]
  Maintenance   Maintenance[]

  @@unique([email, companyId]) // Updated to make email unique per company
}

model Asset {
  id                 String              @id @default(cuid())
  name               String
  assetTag           String              @unique @map("serialNumber")
  notes              String?
  reorderPoint       Int?
  purchaseDate       DateTime
  endOfLife          DateTime?
  endOfLifePlan      String?
  energyConsumption  Decimal?
  expectedLifespan   Int?
  nextMaintenance    DateTime?
  warrantyEndDate    DateTime?
  companyId          String
  categoryId         String?             // Keep as optional
  statusLabelId      String?
  supplierId         String?
  departmentId       String?
  locationId         String?
  inventoryId        String?
  userId             String?
  modelId            String?             // Make modelId optional
  formTemplateId     String?
  purchasePrice      Decimal?
  currentValue       Decimal?
  depreciationRate   Decimal?
  active             Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  
  // Relations
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  category           Category?           @relation(fields: [categoryId], references: [id])
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  user               User?               @relation("assignedToUser", fields: [userId], references: [id], onDelete: SetNull)
  model              Model?              @relation(fields: [modelId], references: [id])
  formValues         FormTemplateValue[]
  co2eRecords        Co2eRecord[]
  transactions       Transaction[]
  assetHistory       AssetHistory[]
  Maintenance        Maintenance[]
  License            License?            @relation(fields: [licenseId], references: [id])
  licenseId          String?
  flowExecutions     FlowExecution[]
  purchaseOrder      PurchaseOrder?      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId    String?
  userItems          UserItem[]

  @@unique([name, companyId])
  @@index([companyId])
  @@index([categoryId])
  @@index([userId])
  @@index([modelId])
}

model Category {
  id            String    @id @default(cuid())
  name          String
  description   String?
  companyId     String
  formTemplateId String?  // Link to form template
  active        Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  company       Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  formTemplate  FormTemplate? @relation(fields: [formTemplateId], references: [id])
  accessories   Accessory[]
  assets        Asset[]

  @@unique([name, companyId])
  @@index([companyId])
  @@index([formTemplateId])
}

model StatusLabel {
  id          String        @id @default(cuid())
  name        String
  colorCode   String
  isArchived  Boolean       @default(false)
  allowLoan   Boolean       @default(false)
  description String
  companyId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  active      Boolean       @default(true)
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets      Asset[]
  accessories Accessory[]
  License     License[]
  Maintenance Maintenance[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Transaction {
  id        String   @id @default(cuid())
  type      String
  amount    Decimal  @db.Decimal(10, 2)
  assetId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
}

model AuditLog {
  id           String   @id @default(cuid())
  action       String
  entity       String
  entityId     String?
  details      String?
  userId       String
  companyId    String
  createdAt    DateTime @default(now())
  ipAddress    String? // Track IP for data access
  dataAccessed Json? // Track what data was accessed

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
}

model Co2eRecord {
  id               String   @id @default(cuid())
  assetId          String?
  itemType         String // Should be either "Asset" or "Accessory"
  userId           String?
  co2e             Decimal  @db.Decimal(15, 2)
  co2eType         String
  units            String   @default("kg")
  sourceOrActivity String
  description      String? // Restored and added description
  details          Json?
  
  // GHG Scope Classification
  scope            Int?     // 1, 2, or 3 for GHG Protocol scopes
  scopeCategory    String?  // Detailed category within scope (e.g., "Purchased goods and services")
  emissionFactor   Decimal? @db.Decimal(15, 6) // kg CO2e per unit
  emissionFactorSource String? // Source of emission factor (e.g., "IEA 2023", "EPA 2024")
  activityData     Json?    // Store activity data used for calculation

  // --- Lifecycle breakdown for amortized reporting ---
  lifecycleManufacturing Decimal? @db.Decimal(15, 2) // Manufacturing stage CO2e
  lifecycleTransport    Decimal? @db.Decimal(15, 2) // Transport stage CO2e
  lifecycleUse          Decimal? @db.Decimal(15, 2) // Use phase CO2e
  lifecycleEndOfLife    Decimal? @db.Decimal(15, 2) // End-of-life stage CO2e
  expectedLifespanYears Int? // Expected lifespan in years
  amortizedMonthlyCo2e  Decimal? @db.Decimal(15, 4) // Total lifecycle CO2e amortized per month
  amortizedAnnualCo2e   Decimal? @db.Decimal(15, 4) // Total lifecycle CO2e amortized per year

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Only one of these will be used based on itemType
  asset         Asset?        @relation(fields: [assetId], references: [id], onDelete: Cascade)
  user          User?        @relation(fields: [userId], references: [id], onDelete: SetNull)
  Accessory     Accessory?   @relation(fields: [accessoryId], references: [id])
  accessoryId   String?
  Maintenance   Maintenance? @relation(fields: [maintenanceId], references: [id])
  maintenanceId String?
}

// Track accessory stock movements
model AccessoryStock {
  id          String   @id @default(cuid())
  accessoryId String
  quantity    Int
  type        String // purchase, assignment, return, disposal
  date        DateTime @default(now())
  notes       String?
  companyId   String

  accessory Accessory @relation(fields: [accessoryId], references: [id], onDelete: Cascade)
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([accessoryId])
  @@index([companyId])
}

// Track license seat allocations
model LicenseSeat {
  id        String   @id @default(cuid())
  licenseId String
  quantity  Int // Number of seats in this allocation
  type      String // purchase, allocation, release
  date      DateTime @default(now())
  notes     String?
  companyId String

  license License @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([companyId])
}

// Track asset movements/status changes
model AssetHistory {
  id        String   @id @default(cuid())
  assetId   String
  type      String // purchase, assignment, return, disposal, status_change
  date      DateTime @default(now())
  notes     String?
  companyId String

  asset   Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([companyId])
}

model Kit {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userKits UserKit[]

  @@unique([name, companyId])
  @@index([companyId])
}

model UserKit {
  userId    String
  kitId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  kit  Kit  @relation(fields: [kitId], references: [id], onDelete: Cascade)

  @@id([userId, kitId])
  @@index([userId])
  @@index([kitId])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Report configuration/template model
model ReportConfiguration {
  id                String   @id @default(cuid())
  name              String
  format            String // PDF, XLSX, etc.
  timePeriod        String // last30days, etc.
  isScheduled       Boolean  @default(false)
  scheduleFrequency String?
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  metrics          ReportMetric[]
  generatedReports GeneratedReport[]

  @@unique([name, companyId])
  @@index([companyId])
}

// Selected metrics for each report configuration
model ReportMetric {
  id                    String  @id @default(cuid())
  reportConfigurationId String
  category              String // Environmental, Operations, Financial, etc.
  metricName            String // Energy Consumption, Carbon Emissions, etc.
  enabled               Boolean @default(true)

  // Relations
  reportConfiguration ReportConfiguration @relation(fields: [reportConfigurationId], references: [id], onDelete: Cascade)

  @@unique([reportConfigurationId, metricName])
  @@index([reportConfigurationId])
}

// Generated reports
model GeneratedReport {
  id              String   @id @default(cuid())
  configurationId String
  title           String
  format          String // PDF, XLSX, etc.
  filePath        String
  fileSize        Float // in MB
  status          String   @default("completed") // completed, processing, failed
  generatedAt     DateTime @default(now())
  companyId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  configuration ReportConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  company       Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([configurationId])
  @@index([companyId])
}

// Pricing Plans System
model PricingPlan {
  id                String   @id @default(cuid())
  name              String   @unique // e.g., "Pro Monthly", "Pro Annual"
  description       String?
  stripePriceId     String   @unique // Stripe Price ID for monthly or annual
  planType          PlanType // PRO, ENTERPRISE
  assetQuota        Int // Max number of assets for this plan
  pricePerAsset     Decimal  @db.Decimal(10, 4) // e.g., 0.35 for monthly, 0.315 for annual
  billingCycle      String   // "monthly" or "yearly"
  trialDays         Int      @default(30)
  isActive          Boolean  @default(true)
  features          Json     // Array of feature strings
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  subscriptions Subscription[]

  @@index([planType])
  @@index([isActive])
}

// Update the existing Subscription model to reference PricingPlan
model Subscription {
  id                   String    @id @default(cuid())
  companyId            String    @unique
  stripeCustomerId     String    @unique
  stripeSubscriptionId String    @unique
  status               String
  billingCycle         String    // "monthly" or "yearly"
  assetQuota           Int       // Number of assets the user wants to track
  trialEndsAt          DateTime?
  cancelAtPeriodEnd    Boolean   @default(false)
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  pricingPlanId        String?
  pricingPlan          PricingPlan? @relation(fields: [pricingPlanId], references: [id])

  company         Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  usageRecords    UsageRecord[]
  invoices        Invoice[]
  billingSettings BillingSettings?

  @@index([companyId])
  @@index([pricingPlanId])
}

model BillingSettings {
  id                  String  @id @default(cuid())
  subscriptionId      String  @unique
  paymentMethodId     String?
  billingEmail        String
  taxId               String?
  billingAddressLine1 String?
  billingAddressLine2 String?
  billingCity         String?
  billingState        String?
  billingZip          String?
  billingCountry      String?

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model UsageRecord {
  id                  String   @id @default(cuid())
  subscriptionId      String
  purchasedAssetQuota Int // Number of assets customer paid to track
  actualAssetCount    Int // Current number of assets being tracked
  timestamp           DateTime @default(now())
  billingPeriodStart  DateTime
  billingPeriodEnd    DateTime
  stripeUsageRecordId String?
  pricePerAsset       Decimal  @db.Decimal(10, 2)
  totalAmount         Decimal  @db.Decimal(10, 2)

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([timestamp])
}

model Invoice {
  id              String    @id @default(cuid())
  subscriptionId  String
  stripeInvoiceId String    @unique
  amount          Decimal   @db.Decimal(10, 2)
  status          String // paid, open, void
  invoiceDate     DateTime
  dueDate         DateTime
  paidAt          DateTime?
  billingPeriod   Json // Store start and end dates
  items           Json // Store line items
  subtotal        Decimal   @db.Decimal(10, 2)
  tax             Decimal   @db.Decimal(10, 2)
  total           Decimal   @db.Decimal(10, 2)

  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId])
  @@index([invoiceDate])
}

// thus is the membership plan
enum PlanType {
  FREE
  PRO
  ENTERPRISE
}

// Company status
enum CompanyStatus {
  ACTIVE
  INACTIVE
}

model Maintenance {
  id             String    @id @default(cuid())
  assetId        String
  statusLabelId  String
  supplierId     String?
  title          String
  notes          String?
  startDate      DateTime
  completionDate DateTime?
  cost           Decimal?  @db.Decimal(10, 2)
  totalCost      Decimal?  @db.Decimal(10, 2)
  isWarranty     Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  asset          Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  statusLabel    StatusLabel     @relation(fields: [statusLabelId], references: [id])
  supplier       Supplier?       @relation(fields: [supplierId], references: [id])
  co2eRecords    Co2eRecord[]
  flowExecutions FlowExecution[]
  Manufacturer   Manufacturer?   @relation(fields: [manufacturerId], references: [id])
  manufacturerId String?

  @@index([assetId])
  @@index([statusLabelId])
}

// Maintenance Types and Categories
model MaintenanceCategory {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String   @default("#3B82F6")
  isActive    Boolean  @default(true)
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company         Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  maintenanceTypes MaintenanceType[]

  @@unique([name, companyId])
  @@index([companyId])
  @@index([isActive])
}

model MaintenanceType {
  id                String   @id @default(cuid())
  name              String
  description       String?
  categoryId        String   // References MaintenanceCategory.id
  priority          String   @default("Medium") // "Low", "Medium", "High", "Critical"
  estimatedDuration Int      @default(1) // in hours
  requiredSkills    Json     @default("[]") // Array of strings
  defaultCost       Decimal  @default(0) @db.Decimal(10, 2)
  isActive          Boolean  @default(true)
  color             String   @default("#3B82F6")
  icon              String   @default("wrench")
  checklist         Json     @default("[]") // Array of ChecklistItem objects
  customFields      Json     @default("[]") // Array of CustomField objects
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company           Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  maintenanceCategory MaintenanceCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@unique([name, companyId])
  @@index([companyId])
  @@index([categoryId])
  @@index([isActive])
}

// Flow Rules System
model FlowRule {
  id          String   @id @default(cuid())
  name        String
  description String
  trigger     String // 'status_change', 'creation', 'completion', 'approval'
  priority    Int      @default(100)
  isActive    Boolean  @default(true)
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company    Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  conditions FlowCondition[]
  actions    FlowAction[]
  executions FlowExecution[]

  @@unique([name, companyId])
  @@index([companyId])
  @@index([trigger])
  @@index([isActive])
}

model FlowCondition {
  id              String  @id @default(cuid())
  flowRuleId      String
  field           String // e.g., 'maintenance.priority', 'asset.category.name'
  operator        String // 'equals', 'not_equals', 'contains', 'greater_than', 'less_than', 'in', 'not_in'
  value           String // JSON string for complex values
  logicalOperator String? @default("AND") // 'AND', 'OR' - for chaining conditions
  order           Int     @default(0) // Order of conditions within the rule

  // Relations
  flowRule FlowRule @relation(fields: [flowRuleId], references: [id], onDelete: Cascade)

  @@index([flowRuleId])
  @@index([order])
}

model FlowAction {
  id         String @id @default(cuid())
  flowRuleId String
  type       String // 'update_status', 'send_notification', 'update_asset', 'create_record', 'send_email', 'calculate_cost'
  parameters Json // Action-specific parameters
  order      Int    @default(0) // Order of actions within the rule

  // Relations
  flowRule FlowRule @relation(fields: [flowRuleId], references: [id], onDelete: Cascade)

  @@index([flowRuleId])
  @@index([order])
}

model FlowExecution {
  id            String   @id @default(cuid())
  flowRuleId    String
  maintenanceId String?
  assetId       String?
  trigger       String
  context       Json // Snapshot of context when rule was executed
  results       Json // Results of action executions
  executedAt    DateTime @default(now())
  success       Boolean  @default(true)
  errorMessage  String?

  // Relations
  flowRule    FlowRule     @relation(fields: [flowRuleId], references: [id], onDelete: Cascade)
  maintenance Maintenance? @relation(fields: [maintenanceId], references: [id], onDelete: SetNull)
  asset       Asset?       @relation(fields: [assetId], references: [id], onDelete: SetNull)

  @@index([flowRuleId])
  @@index([maintenanceId])
  @@index([assetId])
  @@index([executedAt])
  @@index([success])
}

model ContactSubmission {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  company     String?
  jobTitle    String?
  inquiryType String
  message     String
  phoneNumber String?
  isRead      Boolean  @default(false)
  isReplied   Boolean  @default(false)
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([createdAt])
  @@index([isRead])
  @@index([inquiryType])
  @@index([email])
}

// AI Cost Optimization tracking
model CostOptimizationAnalysis {
  id                    String   @id @default(cuid())
  companyId             String
  analysisType          String   // "license", "accessory", "comprehensive"
  totalPotentialSavings Decimal  @db.Decimal(12, 2)
  confidence            Decimal  @db.Decimal(3, 2)  // 0.00 to 1.00
  status                String   @default("pending") // "pending", "in_progress", "completed", "cancelled"
  analysisData          Json     // Full AI analysis results
  implementedSavings    Decimal? @db.Decimal(12, 2)  // Actual savings achieved
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  company         Company                      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recommendations CostOptimizationRecommendation[]

  @@index([companyId])
  @@index([analysisType])
  @@index([createdAt])
}

model CostOptimizationRecommendation {
  id                  String   @id @default(cuid())
  analysisId          String
  recommendationId    String   // AI-generated unique ID
  title               String
  description         String
  category            String   // "consolidation", "rightsizing", "alternative", etc.
  type                String   // "license", "accessory", "workflow"
  potentialSavings    Decimal  @db.Decimal(10, 2)
  confidenceScore     Decimal  @db.Decimal(3, 2)
  implementationEffort String  // "low", "medium", "high"
  timeToValue         Int      // days
  priority            Int      @default(100)
  status              String   @default("pending") // "pending", "approved", "in_progress", "completed", "rejected"
  actualSavings       Decimal? @db.Decimal(10, 2)  // Actual savings if implemented
  implementedAt       DateTime?
  implementedBy       String?  // User ID who implemented
  notes               String?
  affectedAssets      Json?    // Array of asset/license IDs
  actionItems         Json     // Array of action items
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  analysis CostOptimizationAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)

  @@index([analysisId])
  @@index([status])
  @@index([priority])
  @@index([implementedAt])
}

// Cost tracking for budgeting and forecasting
model CostBudget {
  id                String   @id @default(cuid())
  companyId         String
  budgetYear        Int
  budgetPeriod      String   // "annual", "quarterly", "monthly"
  category          String   // "licenses", "accessories", "maintenance", "total"
  budgetedAmount    Decimal  @db.Decimal(12, 2)
  actualAmount      Decimal? @db.Decimal(12, 2)
  forecastedAmount  Decimal? @db.Decimal(12, 2)
  variance          Decimal? @db.Decimal(12, 2)  // Actual vs Budget
  costCenter        String?
  departmentId      String?
  notes             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company    Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department Department? @relation(fields: [departmentId], references: [id], onDelete: SetNull)

  @@unique([companyId, budgetYear, budgetPeriod, category, costCenter])
  @@index([companyId])
  @@index([budgetYear])
  @@index([category])
}

// Smart Cleanup Engine Models

// Track report downloads for analytics
model ReportDownload {
  id           String   @id @default(cuid())
  companyId    String
  filePath     String
  userId       String?
  downloadedAt DateTime @default(now())
  fileSize     Int?
  format       String?
  reportType   String?

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, filePath])
  @@index([downloadedAt])
  @@index([companyId])
}

// Track cleanup operations and decisions
model ReportCleanupLog {
  id          String   @id @default(cuid())
  companyId   String
  filePath    String
  action      String   // DELETE, ARCHIVE, COMPRESS, PROTECT
  spaceSaved  Int      @default(0)
  reasoning   String?
  confidence  Float?   // 0-1 confidence score
  executedAt  DateTime @default(now())
  executedBy  String?  // user ID or 'SYSTEM'

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, executedAt])
  @@index([companyId])
}

// Store file protection rules and metadata
model FileProtectionRule {
  id             String    @id @default(cuid())
  companyId      String
  filePath       String?
  filePattern    String?   // regex pattern for matching files
  protectionType String    // PERMANENT, TEMPORARY, CONDITIONAL
  reason         String?
  expiresAt      DateTime?
  createdAt      DateTime  @default(now())
  createdBy      String?

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, filePath])
  @@index([companyId])
}

// Store cleanup policies per company
model CleanupPolicy {
  id           String   @id @default(cuid())
  companyId    String
  name         String
  format       String   // pdf, xlsx, csv, etc.
  retentionDays Int
  maxFiles     Int?
  maxSizeGB    Float?
  priority     String   @default("medium") // low, medium, high
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([name, companyId])
  @@index([companyId, format])
  @@index([companyId])
}

// Store smart cleanup analytics and insights
model StorageAnalytics {
  id                   String   @id @default(cuid())
  companyId            String
  analysisDate         DateTime @default(now())
  totalFiles           Int
  totalSizeBytes       BigInt
  averageFileAge       Int?     // days
  duplicateFiles       Int?
  unusedFiles          Int?
  compressionPotential Float?   // percentage
  insights             String?  // JSON string with detailed insights

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
  @@index([analysisDate])
}

model CompanySettings {
  id             String   @id @default(cuid())
  companyId      String   @unique
  assetTagFormat String? // Regex or template for asset tags
  // Add more fields as needed (e.g., namingConvention, defaultLocation, etc.)
  updatedAt      DateTime @updatedAt
  company        Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}
