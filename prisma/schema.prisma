generator client {
  provider = "prisma-client-js"
}

// npx prisma migrate dev --create-only --name <NAME>
// npx prisma migrate dev
// npx prisma generate
// npx prisma db pull
// npx prisma db push -

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  oauthId       String?
  roleId        String
  companyId     String
  firstName     String
  lastName      String
  name          String
  Images        String?
  emailVerified DateTime?
  title         String?
  auditLogs     AuditLog[]
  company       Company      @relation(fields: [companyId], references: [id])
  role          Role         @relation(fields: [roleId], references: [id])
  co2eRecords   Co2eRecord[]
  employeeId    String?
  accounts      Account[]
  // kits        UserKit[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// model User_ {
//   id            String          @id @default(cuid())
//   name          String?
//   email         String          @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   // Optional for WebAuthn support
//   Authenticator Authenticator[]
//
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Account {
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?
//
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//
//   @@id([provider, providerAccountId])
// }

model Co2eRecord {
  id               String   @id @default(cuid())
  asset            Asset    @relation(fields: [assetId], references: [id])
  assetId          String
  co2e             Float // CO2e in kg
  co2eType         String // Type of CO2e (e.g., Scope 1, Scope 2, Scope 3)
  sourceOrActivity String // Description of the source or activity
  date             DateTime // Date of the CO2e record
  createdAt        DateTime @default(now())
  User             User?    @relation(fields: [userId], references: [id])
  userId           String?
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
}

model Company {
  id           String        @id @default(cuid())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  auditLogs    AuditLog[]
  users        User[]
  assets       Asset[]
  accessories  Accessory[]
  categories   Category[]
  roles        Role[]
  statusLabels StatusLable[]
}

model Accessory {
  id                 String    @id @default(cuid())
  title              String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  alertEmail         String
  minQuantityAlert   Int
  totalQuantityCount Int
  vendor             String
  purchaseDate       DateTime
  description        String?
  categoryId         String?   @unique
  category           Category? @relation(fields: [categoryId], references: [id]) // Made optional
  companyId          String?
  company            Company?  @relation(fields: [companyId], references: [id])
}

model Asset {
  id            String       @id @default(cuid())
  name          String
  price         Float
  categoryId    String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  assigneeId    String?
  brand         String
  model         String
  serialNumber  String       @unique
  licenseId     String?
  statusLabelId String?
  statusLabel   StatusLable? @relation(fields: [statusLabelId], references: [id])
  category      Category     @relation(fields: [categoryId], references: [id])
  license       License?     @relation(fields: [licenseId], references: [id])
  Co2eRecord    Co2eRecord[]
  companyId     String
  company       Company      @relation(fields: [companyId], references: [id])
  // kits          KitAsset[]
}

model StatusLable {
  id          String   @id @default(cuid())
  name        String   @unique
  colorCode   String
  isArchived  Boolean
  allowLoan   Boolean
  description String
  Asset       Asset[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Company     Company? @relation(fields: [companyId], references: [id])
  companyId   String?
}

model Category {
  id        String      @id @default(cuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  assets    Asset[]
  accessory Accessory[]
  companyId String?
  company   Company?    @relation(fields: [companyId], references: [id])
}

model Transaction {
  id        String   @id @default(cuid())
  type      String
  amount    Float
  assetId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model License {
  id                 String   @id @default(cuid())
  name               String   @unique
  licensedEmail      String
  licenseKey         String
  renewalDate        DateTime
  purchaseDate       DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  vendor             String?
  purchaseNotes      String?
  licenseUrl         String?
  minCopiesAlert     Int
  alertRenewalDays   Int
  licenseCopiesCount Int
  purchasePrice      Decimal
  assets             Asset[]
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  entity    String
  entityId  String?
  userId    String
  details   String?
  createdAt DateTime @default(now())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//
// model Kit {
//   id          Int        @id @default(autoincrement())
//   name        String
//   description String?
//   assets      KitAsset[]
//   users       UserKit[]
// }
//
// model KitAsset {
//   kitId   Int
//   assetId Int
//   kit     Kit   @relation(fields: [kitId], references: [id])
//   asset   Asset? @relation(fields: [assetId], references: [id])
//   @@id([kitId, assetId])
// }
//
// model UserKit {
//   userId Int
//   kitId  Int
//   user   User @relation(fields: [userId], references: [id])
//   kit    Kit? @relation(fields: [kitId], references: [id])
//
//   @@id([userId, kitId])
// }
