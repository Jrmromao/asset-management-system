generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String        @id @default(cuid())
  email                 String        @unique
  firstName             String
  lastName              String
  name                  String
  title                 String?
  employeeId            String?
  images                String?
  phoneNum              String?       @unique
  emailVerified         DateTime?
  oauthId               String?
  roleId                String
  companyId             String
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  active                Boolean       @default(true)
  accountType           String        @default("Internal User")
  departmentId          String?
  dataRetentionDate     DateTime?
  consentHistory        UserConsent[]
  dataProcessingConsent Boolean       @default(false)
  marketingConsent      Boolean       @default(false)
  lastConsentUpdate     DateTime?

  // Relations
  company    Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  role       Role         @relation(fields: [roleId], references: [id], onDelete: Restrict)
  department Department?  @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  assets     Asset[]      @relation("assignedToUser")
  auditLogs  AuditLog[]
  accounts   Account[]
  userKits   UserKit[]
  // licenses      UserLicense[]
  userItem   UserItem[]
  Co2eRecord Co2eRecord[]

  @@unique([employeeId, companyId])
  @@index([companyId])
  @@index([roleId])
  @@index([email])
}

model License {
  id               String   @id @default(cuid())
  name             String
  licensedEmail    String
  poNumber         String
  companyId        String
  statusLabelId    String?
  supplierId       String?
  departmentId     String?
  locationId       String?
  inventoryId      String?
  renewalDate      DateTime
  purchaseDate     DateTime
  purchaseNotes    String?
  licenseUrl       String?
  minSeatsAlert    Int      @default(0)
  alertRenewalDays Int
  seats            Int      @default(0)
  purchasePrice    Decimal  @db.Decimal(10, 2)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  userItems          UserItem[]

  LicenseSeat     LicenseSeat[]
  Asset           Asset[]
  // PurchaseOrder   PurchaseOrder? @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId String?
}

// model PurchaseOrder {
//   id           String   @id @default(cuid())
//   poNumber     String   @unique
//   companyId    String
//   supplierId   String?
//   purchaseDate DateTime
//   status       String // e.g., "draft", "submitted", "approved", "received"
//   notes        String?
//   totalAmount  Decimal  @db.Decimal(10, 2)
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
//
//   // Relations
//   company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
//   supplier    Supplier?   @relation(fields: [supplierId], references: [id], onDelete: SetNull)
//   licenses    License[]
//   accessories Accessory[]
//
//   @@index([companyId])
//   @@index([supplierId])
// }

model Accessory {
  id                 String              @id @default(cuid())
  name               String
  alertEmail         String
  serialNumber       String              @default("")
  reorderPoint       Int
  totalQuantityCount Int
  purchaseDate       DateTime
  notes              String?
  material           String
  endOfLife          DateTime
  companyId          String
  modelNumber        String?
  statusLabelId      String?
  supplierId         String?
  departmentId       String?
  locationId         String?
  inventoryId        String?
  categoryId         String?
  poNumber           String?
  weight             Decimal?
  price              Decimal?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  company            Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  // co2eRecords Co2eRecord[]
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  userItems          UserItem[]
  AccessoryStock     AccessoryStock[]
  Co2eRecord         Co2eRecord[]
  category           Category?           @relation(fields: [categoryId], references: [id])
  // PurchaseOrder      PurchaseOrder?      @relation(fields: [purchaseOrderId], references: [id])
  purchaseOrderId    String?

  @@unique([poNumber, companyId])
  @@unique([serialNumber, companyId])
  @@index([companyId])
  @@index([categoryId])
}

model UserConsent {
  id        String   @id @default(cuid())
  userId    String
  type      String // 'data_processing', 'marketing', etc.
  granted   Boolean
  timestamp DateTime @default(now())
  ipAddress String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Form Template table to store the template structure
model FormTemplate {
  id        String              @id @default(cuid())
  name      String
  fields    Json
  companyId String
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  company   Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets    Asset[]
  values    FormTemplateValue[]

  @@unique([name, companyId])
  @@index([companyId])
}

model FormTemplateValue {
  id           String       @id @default(cuid())
  values       Json
  assetId      String
  templateId   String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  asset        Asset        @relation(fields: [assetId], references: [id], onDelete: Cascade)
  formTemplate FormTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([templateId])
}

// model UserLicense {
//   id            String    @id @default(cuid())
//   userId        String
//   licenseId     String
//   assignedAt    DateTime  @default(now())
//   expiresAt     DateTime?
//   seatsAssigned Int
//
//   // Relations
//   user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   license License @relation(fields: [licenseId], references: [id], onDelete: Cascade)
//
//   @@unique([userId, licenseId]) // Prevents duplicate assignments
//   @@index([userId])
//   @@index([licenseId])
// }

// model UserAccessory {
//   id          String    @id @default(cuid())
//   userId      String
//   accessoryId String
//   quantity    Int       @default(1)
//   assignedAt  DateTime  @default(now())
//   returnedAt  DateTime?
//   notes       String?
//   companyId   String
//
//   // Relations
//   user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
//   accessory Accessory @relation(fields: [accessoryId], references: [id], onDelete: Cascade)
//   company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
//
//   @@unique([userId, accessoryId]) // Prevent duplicate assignments
//   @@index([userId])
//   @@index([accessoryId])
//   @@index([companyId])
// }

model UserItem {
  id          String    @id @default(cuid())
  userId      String
  itemType    ItemType
  licenseId   String?
  accessoryId String?
  quantity    Int       @default(1)
  assignedAt  DateTime  @default(now())
  revokedAt   DateTime?
  returnedAt  DateTime?
  notes       String?
  companyId   String

  // Relations
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  license   License?   @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  accessory Accessory? @relation(fields: [accessoryId], references: [id], onDelete: Cascade)
  company   Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, licenseId])
  @@unique([userId, accessoryId])
  @@index([userId])
  @@index([licenseId])
  @@index([accessoryId])
  @@index([companyId])
}

enum ItemType {
  LICENSE
  ACCESSORY
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Role {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isAdctive Boolean  @default(true)
  users     User[]
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users          User[]
  assets         Asset[]
  accessories    Accessory[]
  categories     Category[]
  departments    Department[]
  locations      DepartmentLocation[]
  manufacturers  Manufacturer[]
  models         Model[]
  inventories    Inventory[]
  statusLabels   StatusLabel[]
  auditLogs      AuditLog[]
  kits           Kit[]
  suppliers      Supplier[] // Add this relation
  License        License[]
  FormTemplate   FormTemplate[]
  userItem       UserItem[]
  AccessoryStock AccessoryStock[]
  LicenseSeat    LicenseSeat[]
  AssetHistory   AssetHistory[]

  ReportConfiguration ReportConfiguration[]
  GeneratedReport     GeneratedReport[]
  // PurchaseOrder       PurchaseOrder[]
}

model Manufacturer {
  id           String   @id @default(cuid())
  name         String   @unique
  url          String
  supportUrl   String   @unique
  supportPhone String? // Made optional
  supportEmail String? // Made optional
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  models  Model[]

  @@index([companyId])
}

model Model {
  id             String       @id @default(cuid())
  name           String
  modelNo        String
  // categoryId     String
  manufacturerId String
  companyId      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  notes          String?
  // category       Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id], onDelete: Restrict)
  company        Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets         Asset[]

  @@unique([modelNo, companyId])
  // @@index([categoryId])
  @@index([manufacturerId])
  @@index([companyId])
}

model DepartmentLocation {
  id           String   @id @default(cuid())
  name         String // Changed from locName for consistency
  addressLine1 String
  addressLine2 String? // Made optional
  city         String
  state        String
  zip          String
  country      String
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset     Asset[]
  Accessory Accessory[]
  License   License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Inventory {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset     Asset[]
  Accessory Accessory[]
  License   License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Department {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  Asset     Asset[]
  Accessory Accessory[]
  License   License[]
  User      User[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Supplier {
  id           String   @id @default(cuid())
  name         String
  contactName  String
  email        String   @unique
  phoneNum     String? // Made optional
  url          String? // Made optional
  addressLine1 String
  addressLine2 String? // Made optional
  city         String
  state        String
  zip          String
  country      String
  notes        String? // Made optional
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  assets      Asset[]
  accessories Accessory[]
  company     Company     @relation(fields: [companyId], references: [id])
  companyId   String
  License     License[]
  // PurchaseOrder PurchaseOrder[]

  @@unique([email, companyId]) // Updated to make email unique per company
}

model Asset {
  id                  String    @id @default(cuid())
  name                String
  serialNumber        String
  material            String?
  endOfLife           DateTime?
  datePurchased       DateTime?
  assigneeId          String?
  statusLabelId       String?
  locationId          String?
  inventoryId         String?
  companyId           String
  supplierId          String?
  departmentId        String?
  modelId             String?
  energyRating        String?
  dailyOperatingHours Int?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  poNumber            String?
  weight              Decimal?  @db.Decimal(10, 2)
  price               Decimal?  @db.Decimal(10, 2)
  status              String    @default("Available")
  assignee            User?     @relation("assignedToUser", fields: [assigneeId], references: [id], onDelete: SetNull)
  company             Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  model              Model?              @relation(fields: [modelId], references: [id], onDelete: SetNull)
  statusLabel        StatusLabel?        @relation(fields: [statusLabelId], references: [id], onDelete: SetNull)
  supplier           Supplier?           @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  department         Department?         @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  departmentLocation DepartmentLocation? @relation(fields: [locationId], references: [id], onDelete: SetNull)
  inventory          Inventory?          @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  formTemplateId     String?
  formTemplate       FormTemplate?       @relation(fields: [formTemplateId], references: [id], onDelete: SetNull)
  formTemplateValues FormTemplateValue[] // Changed from FormTemplateValue to formTemplateValues

  transactions Transaction[]
  licenseId    String?
  License      License?       @relation(fields: [licenseId], references: [id])
  AssetHistory AssetHistory[]
  Co2eRecord   Co2eRecord[]

  @@unique([serialNumber, companyId])
  @@unique([poNumber, companyId])
  @@index([assigneeId])
  @@index([companyId])
  @@index([licenseId])
  @@index([statusLabelId])
  @@index([supplierId])
  @@index([modelId])
  @@index([formTemplateId])
}

model Category {
  id        String   @id @default(cuid())
  name      String
  type      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  // models    Model[]
  Accessory Accessory[]

  @@unique([name, companyId])
  @@index([companyId])
}

model StatusLabel {
  id          String   @id @default(cuid())
  name        String
  colorCode   String
  isArchived  Boolean  @default(false)
  allowLoan   Boolean  @default(false)
  description String
  companyId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  assets      Asset[]
  accessories Accessory[]
  License     License[]

  @@unique([name, companyId])
  @@index([companyId])
}

model Transaction {
  id        String   @id @default(cuid())
  type      String
  amount    Decimal  @db.Decimal(10, 2)
  assetId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId])
}

model AuditLog {
  id           String   @id @default(cuid())
  action       String
  entity       String
  entityId     String?
  details      String?
  userId       String
  companyId    String
  createdAt    DateTime @default(now())
  ipAddress    String? // Track IP for data access
  dataAccessed Json? // Track what data was accessed

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
}

model Co2eRecord {
  id               String   @id @default(cuid())
  itemId           String
  itemType         String
  userId           String?
  co2e             Float
  co2eType         String
  sourceOrActivity String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  asset     Asset?     @relation(fields: [itemId], references: [id], onDelete: Cascade, map: "Co2eRecord_assetId_fkey")
  accessory Accessory? @relation(fields: [itemId], references: [id], onDelete: Cascade, map: "Co2eRecord_accessoryId_fkey")
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([itemId])
  @@index([userId])
  @@index([itemType])
}

// Track accessory stock movements
model AccessoryStock {
  id          String   @id @default(cuid())
  accessoryId String
  quantity    Int
  type        String // purchase, assignment, return, disposal
  date        DateTime @default(now())
  notes       String?
  companyId   String

  accessory Accessory @relation(fields: [accessoryId], references: [id], onDelete: Cascade)
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([accessoryId])
  @@index([companyId])
}

// Track license seat allocations
model LicenseSeat {
  id        String   @id @default(cuid())
  licenseId String
  quantity  Int // Number of seats in this allocation
  type      String // purchase, allocation, release
  date      DateTime @default(now())
  notes     String?
  companyId String

  license License @relation(fields: [licenseId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([licenseId])
  @@index([companyId])
}

// Track asset movements/status changes
model AssetHistory {
  id        String   @id @default(cuid())
  assetId   String
  type      String // purchase, assignment, return, disposal, status_change
  date      DateTime @default(now())
  notes     String?
  companyId String

  asset   Asset   @relation(fields: [assetId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([assetId])
  @@index([companyId])
}

model Kit {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company  Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userKits UserKit[]

  @@unique([name, companyId])
  @@index([companyId])
}

model UserKit {
  userId    String
  kitId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  kit  Kit  @relation(fields: [kitId], references: [id], onDelete: Cascade)

  @@id([userId, kitId])
  @@index([userId])
  @@index([kitId])
}

model Waitlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Report configuration/template model
model ReportConfiguration {
  id                String   @id @default(cuid())
  name              String
  format            String // PDF, XLSX, etc.
  timePeriod        String // last30days, etc.
  isScheduled       Boolean  @default(false)
  scheduleFrequency String?
  companyId         String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  company          Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  metrics          ReportMetric[]
  generatedReports GeneratedReport[]

  @@unique([name, companyId])
  @@index([companyId])
}

// Selected metrics for each report configuration
model ReportMetric {
  id                    String  @id @default(cuid())
  reportConfigurationId String
  category              String // Environmental, Operations, Financial, etc.
  metricName            String // Energy Consumption, Carbon Emissions, etc.
  enabled               Boolean @default(true)

  // Relations
  reportConfiguration ReportConfiguration @relation(fields: [reportConfigurationId], references: [id], onDelete: Cascade)

  @@unique([reportConfigurationId, metricName])
  @@index([reportConfigurationId])
}

// Generated reports
model GeneratedReport {
  id              String   @id @default(cuid())
  configurationId String
  title           String
  format          String // PDF, XLSX, etc.
  filePath        String
  fileSize        Float // in MB
  status          String   @default("completed") // completed, processing, failed
  generatedAt     DateTime @default(now())
  companyId       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  configuration ReportConfiguration @relation(fields: [configurationId], references: [id], onDelete: Cascade)
  company       Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([configurationId])
  @@index([companyId])
}
